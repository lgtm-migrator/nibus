"use strict";

require("source-map-support/register");

var _Address = _interopRequireWildcard(require("./Address"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * @license
 * Copyright (c) 2019. OOO Nata-Info
 * @author Andrei Sarakeev <avs@nata-info.ru>
 *
 * This file is part of the "@nata" project.
 * For the full copyright and license information, please view
 * the EULA file that was distributed with this source code.
 */
describe('Address', () => {
  describe('constructor', () => {
    test('should be empty', () => {
      const empty = new _Address.default();
      expect(empty).toHaveProperty('type', _Address.AddressType.empty);
      expect(empty.isEmpty).toBe(true);
      expect(new _Address.default(empty.toString())).toHaveProperty('isEmpty', true);
      expect(new _Address.default([0, 0, 0, 0, 0, 0])).toHaveProperty('isEmpty', true);
    });
    test('should be net', () => {
      const net = expect(new _Address.default('FE.56.34'));
      net.toHaveProperty('type', _Address.AddressType.net);
      net.toHaveProperty('domain', 0xFE);
      net.toHaveProperty('subnet', 0x56);
      net.toHaveProperty('device', 0x34);
    });
    test('should be group', () => {
      const group = expect(new _Address.default('255.128'));
      group.toHaveProperty('domain', 255);
      group.toHaveProperty('group', 128);
      group.toHaveProperty('type', _Address.AddressType.group);
    });
    test('should be string mac', () => {
      const address = new _Address.default('01::FF:23');
      const address2 = new _Address.default('::45:77');
      const empty = new _Address.default('::0');
      expect(address).toHaveProperty('type', _Address.AddressType.mac);
      expect(address.mac && address.mac.equals(Buffer.from([1, 0, 0, 0, 255, 0x23]))).toBe(true);
      expect(address2.mac && address2.mac.equals(Buffer.from([0, 0, 0, 0, 0x45, 0x77]))).toBe(true);
      expect(empty).toHaveProperty('type', _Address.AddressType.empty);
    });
    test('should be array mac', () => {
      const array = [1, 2, 3, 4, 5, 6];
      const mac = new Uint8Array(array);
      const address = new _Address.default(mac);
      expect(address.mac && address.mac.equals(mac)).toBe(true);
      expect(address).toHaveProperty('type', _Address.AddressType.mac);
    });
  });
  describe('comparision', () => {
    const a = new _Address.default('::45:78');
    const b = new _Address.default([0, 0, 0, 0, 0x45, 0x78]);
    const c = new _Address.default();
    const d = new _Address.default('::45:79');
    test('should be equal', () => {
      expect(a.equals(b)).toBe(true);
      expect(a.equals(a)).toBe(true);
      expect(c.equals(_Address.default.empty)).toBe(true);
      expect(a.equals(new _Address.default(a))).toBe(true);
    });
    test('shouldn\'t be equal', () => {
      expect(a.equals(c)).toBe(false);
      expect(a.equals(d)).toBe(false);
    });
  });
  test('toString', () => {
    expect(new _Address.default().toString()).toBe('::0');
    expect(_Address.default.broadcast.toString()).toBe('FF:FF:FF:FF:FF:FF');
    expect(new _Address.default('::12:3f').toString()).toBe('::12:3F');
    expect(new _Address.default([1, 2, 3, 4, 5, 6]).toString()).toBe('01:02:03:04:05:06');
    expect(new _Address.default('ff.0.1').toString()).toBe('255.0.1');
    expect(new _Address.default('12.34').toString()).toBe('12.34');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGRyZXNzLnNwZWMudHMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZW1wdHkiLCJBZGRyZXNzIiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJBZGRyZXNzVHlwZSIsImlzRW1wdHkiLCJ0b0JlIiwidG9TdHJpbmciLCJuZXQiLCJncm91cCIsImFkZHJlc3MiLCJhZGRyZXNzMiIsIm1hYyIsImVxdWFscyIsIkJ1ZmZlciIsImZyb20iLCJhcnJheSIsIlVpbnQ4QXJyYXkiLCJhIiwiYiIsImMiLCJkIiwiYnJvYWRjYXN0Il0sIm1hcHBpbmdzIjoiOzs7O0FBVUE7Ozs7OztBQVZBOzs7Ozs7Ozs7QUFZQUEsUUFBUSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ3hCQSxFQUFBQSxRQUFRLENBQUMsYUFBRCxFQUFnQixNQUFNO0FBQzVCQyxJQUFBQSxJQUFJLENBQUMsaUJBQUQsRUFBb0IsTUFBTTtBQUM1QixZQUFNQyxLQUFLLEdBQUcsSUFBSUMsZ0JBQUosRUFBZDtBQUNBQyxNQUFBQSxNQUFNLENBQUNGLEtBQUQsQ0FBTixDQUFjRyxjQUFkLENBQTZCLE1BQTdCLEVBQXFDQyxxQkFBWUosS0FBakQ7QUFDQUUsTUFBQUEsTUFBTSxDQUFDRixLQUFLLENBQUNLLE9BQVAsQ0FBTixDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0I7QUFDQUosTUFBQUEsTUFBTSxDQUFDLElBQUlELGdCQUFKLENBQVlELEtBQUssQ0FBQ08sUUFBTixFQUFaLENBQUQsQ0FBTixDQUFzQ0osY0FBdEMsQ0FBcUQsU0FBckQsRUFBZ0UsSUFBaEU7QUFDQUQsTUFBQUEsTUFBTSxDQUFDLElBQUlELGdCQUFKLENBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQixDQUFoQixDQUFaLENBQUQsQ0FBTixDQUF3Q0UsY0FBeEMsQ0FBdUQsU0FBdkQsRUFBa0UsSUFBbEU7QUFDRCxLQU5HLENBQUo7QUFRQUosSUFBQUEs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QU0sQ0FBQ2dCLENBQUMsQ0FBQ0wsTUFBRixDQUFTUSxDQUFULENBQUQsQ0FBTixDQUFvQmYsSUFBcEIsQ0FBeUIsS0FBekI7QUFDRCxLQUhHLENBQUo7QUFJRCxHQWZPLENBQVI7QUFpQkFQLEVBQUFBLElBQUksQ0FBQyxVQUFELEVBQWEsTUFBTTtBQUNyQkcsSUFBQUEsTUFBTSxDQUFDLElBQUlELGdCQUFKLEdBQWNNLFFBQWQsRUFBRCxDQUFOLENBQWlDRCxJQUFqQyxDQUFzQyxLQUF0QztBQUNBSixJQUFBQSxNQUFNLENBQUNELGlCQUFRcUIsU0FBUixDQUFrQmYsUUFBbEIsRUFBRCxDQUFOLENBQXFDRCxJQUFyQyxDQUEwQyxtQkFBMUM7QUFDQUosSUFBQUEsTUFBTSxDQUFDLElBQUlELGdCQUFKLENBQVksU0FBWixFQUF1Qk0sUUFBdkIsRUFBRCxDQUFOLENBQTBDRCxJQUExQyxDQUErQyxTQUEvQztBQUNBSixJQUFBQSxNQUFNLENBQUMsSUFBSUQsZ0JBQUosQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLENBQVosRUFBZ0NNLFFBQWhDLEVBQUQsQ0FBTixDQUFtREQsSUFBbkQsQ0FBd0QsbUJBQXhEO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQyxJQUFJRCxnQkFBSixDQUFZLFFBQVosRUFBc0JNLFFBQXRCLEVBQUQsQ0FBTixDQUF5Q0QsSUFBekMsQ0FBOEMsU0FBOUM7QUFDQUosSUFBQUEsTUFBTSxDQUFDLElBQUlELGdCQUFKLENBQVksT0FBWixFQUFxQk0sUUFBckIsRUFBRCxDQUFOLENBQXdDRCxJQUF4QyxDQUE2QyxPQUE3QztBQUNELEdBUEcsQ0FBSjtBQVFELENBckVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOS4gT09PIE5hdGEtSW5mb1xuICogQGF1dGhvciBBbmRyZWkgU2FyYWtlZXYgPGF2c0BuYXRhLWluZm8ucnU+XG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIFwiQG5hdGFcIiBwcm9qZWN0LlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXdcbiAqIHRoZSBFVUxBIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBBZGRyZXNzLCB7IEFkZHJlc3NUeXBlIH0gZnJvbSAnLi9BZGRyZXNzJztcblxuZGVzY3JpYmUoJ0FkZHJlc3MnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgYmUgZW1wdHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBlbXB0eSA9IG5ldyBBZGRyZXNzKCk7XG4gICAgICBleHBlY3QoZW1wdHkpLnRvSGF2ZVByb3BlcnR5KCd0eXBlJywgQWRkcmVzc1R5cGUuZW1wdHkpO1xuICAgICAgZXhwZWN0KGVtcHR5LmlzRW1wdHkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobmV3IEFkZHJlc3MoZW1wdHkudG9TdHJpbmcoKSkpLnRvSGF2ZVByb3BlcnR5KCdpc0VtcHR5JywgdHJ1ZSk7XG4gICAgICBleHBlY3QobmV3IEFkZHJlc3MoWzAsIDAsIDAsIDAsIDAsIDBdKSkudG9IYXZlUHJvcGVydHkoJ2lzRW1wdHknLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBiZSBuZXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuZXQgPSBleHBlY3QobmV3IEFkZHJlc3MoJ0ZFLjU2LjM0JykpO1xuICAgICAgbmV0LnRvSGF2ZVByb3BlcnR5KCd0eXBlJywgQWRkcmVzc1R5cGUubmV0KTtcbiAgICAgIG5ldC50b0hhdmVQcm9wZXJ0eSgnZG9tYWluJywgMHhGRSk7XG4gICAgICBuZXQudG9IYXZlUHJvcGVydHkoJ3N1Ym5ldCcsIDB4NTYpO1xuICAgICAgbmV0LnRvSGF2ZVByb3BlcnR5KCdkZXZpY2UnLCAweDM0KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBiZSBncm91cCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGdyb3VwID0gZXhwZWN0KG5ldyBBZGRyZXNzKCcyNTUuMTI4JykpO1xuICAgICAgZ3JvdXAudG9IYXZlUHJvcGVydHkoJ2RvbWFpbicsIDI1NSk7XG4gICAgICBncm91cC50b0hhdmVQcm9wZXJ0eSgnZ3JvdXAnLCAxMjgpO1xuICAgICAgZ3JvdXAudG9IYXZlUHJvcGVydHkoJ3R5cGUnLCBBZGRyZXNzVHlwZS5ncm91cCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYmUgc3RyaW5nIG1hYycsICgpID0+IHtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBuZXcgQWRkcmVzcygnMDE6OkZGOjIzJyk7XG4gICAgICBjb25zdCBhZGRyZXNzMiA9IG5ldyBBZGRyZXNzKCc6OjQ1Ojc3Jyk7XG4gICAgICBjb25zdCBlbXB0eSA9IG5ldyBBZGRyZXNzKCc6OjAnKTtcbiAgICAgIGV4cGVjdChhZGRyZXNzKS50b0hhdmVQcm9wZXJ0eSgndHlwZScsIEFkZHJlc3NUeXBlLm1hYyk7XG4gICAgICBleHBlY3QoYWRkcmVzcy5tYWMgJiYgYWRkcmVzcy5tYWMuZXF1YWxzKEJ1ZmZlci5mcm9tKFsxLCAwLCAwLCAwLCAyNTUsIDB4MjNdKSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYWRkcmVzczIubWFjICYmIGFkZHJlc3MyLm1hYy5lcXVhbHMoQnVmZmVyLmZyb20oWzAsIDAsIDAsIDAsIDB4NDUsIDB4NzddKSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZW1wdHkpLnRvSGF2ZVByb3BlcnR5KCd0eXBlJywgQWRkcmVzc1R5cGUuZW1wdHkpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGJlIGFycmF5IG1hYycsICgpID0+IHtcbiAgICAgIGNvbnN0IGFycmF5ID0gWzEsIDIsIDMsIDQsIDUsIDZdO1xuICAgICAgY29uc3QgbWFjID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpO1xuICAgICAgY29uc3QgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKG1hYyk7XG4gICAgICBleHBlY3QoYWRkcmVzcy5tYWMgJiYgYWRkcmVzcy5tYWMuZXF1YWxzKG1hYykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYWRkcmVzcykudG9IYXZlUHJvcGVydHkoJ3R5cGUnLCBBZGRyZXNzVHlwZS5tYWMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY29tcGFyaXNpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgYSA9IG5ldyBBZGRyZXNzKCc6OjQ1Ojc4Jyk7XG4gICAgY29uc3QgYiA9IG5ldyBBZGRyZXNzKFswLCAwLCAwLCAwLCAweDQ1LCAweDc4XSk7XG4gICAgY29uc3QgYyA9IG5ldyBBZGRyZXNzKCk7XG4gICAgY29uc3QgZCA9IG5ldyBBZGRyZXNzKCc6OjQ1Ojc5Jyk7XG4gICAgdGVzdCgnc2hvdWxkIGJlIGVxdWFsJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGEuZXF1YWxzKGIpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGEuZXF1YWxzKGEpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGMuZXF1YWxzKEFkZHJlc3MuZW1wdHkpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGEuZXF1YWxzKG5ldyBBZGRyZXNzKGEpKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgICB0ZXN0KCdzaG91bGRuXFwndCBiZSBlcXVhbCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChhLmVxdWFscyhjKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoYS5lcXVhbHMoZCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCd0b1N0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QobmV3IEFkZHJlc3MoKS50b1N0cmluZygpKS50b0JlKCc6OjAnKTtcbiAgICBleHBlY3QoQWRkcmVzcy5icm9hZGNhc3QudG9TdHJpbmcoKSkudG9CZSgnRkY6RkY6RkY6RkY6RkY6RkYnKTtcbiAgICBleHBlY3QobmV3IEFkZHJlc3MoJzo6MTI6M2YnKS50b1N0cmluZygpKS50b0JlKCc6OjEyOjNGJyk7XG4gICAgZXhwZWN0KG5ldyBBZGRyZXNzKFsxLCAyLCAzLCA0LCA1LCA2XSkudG9TdHJpbmcoKSkudG9CZSgnMDE6MDI6MDM6MDQ6MDU6MDYnKTtcbiAgICBleHBlY3QobmV3IEFkZHJlc3MoJ2ZmLjAuMScpLnRvU3RyaW5nKCkpLnRvQmUoJzI1NS4wLjEnKTtcbiAgICBleHBlY3QobmV3IEFkZHJlc3MoJzEyLjM0JykudG9TdHJpbmcoKSkudG9CZSgnMTIuMzQnKTtcbiAgfSk7XG59KTtcbiJdfQ==