"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = action;
exports.default = void 0;

require("source-map-support/register");

var _handlers = require("../handlers");

async function action(device, args) {
  const vars = args._.slice(1).map(arg => arg.split('=', 2)).filter(([name, value]) => name !== '' && value !== '').map(([name, value]) => [device.getName(name), device.getId(name), value]);

  vars.forEach(([name,, value]) => {
    device[name] = value;
  });

  if (vars.length === 0) {
    return;
  }

  args.quiet || console.log(`Writing to ${Reflect.getMetadata('mib', device)} [${device.address}]`);
  return device.write(...vars.map(([, id]) => id)).then(ids => {
    if (args.quiet) return;
    ids.map(id => device.getName(id)).forEach(name => console.log(` - ${name} = ${JSON.stringify(device[name])}`));
  });
}

const writeCommand = {
  command: 'write',
  describe: 'запись переменных в устройство',
  builder: argv => argv.demandOption(['mac', 'm']).example('$0 write -m ::ab:cd hofs=100 vofs=300 brightness=34', `записать в переменные: hofs<-100, vofs<-300, brightness<-34 на устройстве с адресом ::ab:cd
      mib указывать не обязательно, если у устройства есть firmware_version`),
  handler: (0, _handlers.makeAddressHandler)(action, true)
};
var _default = writeCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvY29tbWFuZHMvd3JpdGUudHMiXSwibmFtZXMiOlsiYWN0aW9uIiwiZGV2aWNlIiwiYXJncyIsInZhcnMiLCJfIiwic2xpY2UiLCJtYXAiLCJhcmciLCJzcGxpdCIsImZpbHRlciIsIm5hbWUiLCJ2YWx1ZSIsImdldE5hbWUiLCJnZXRJZCIsImZvckVhY2giLCJsZW5ndGgiLCJxdWlldCIsImNvbnNvbGUiLCJsb2ciLCJSZWZsZWN0IiwiZ2V0TWV0YWRhdGEiLCJhZGRyZXNzIiwid3JpdGUiLCJpZCIsInRoZW4iLCJpZHMiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JpdGVDb21tYW5kIiwiY29tbWFuZCIsImRlc2NyaWJlIiwiYnVpbGRlciIsImFyZ3YiLCJkZW1hbmRPcHRpb24iLCJleGFtcGxlIiwiaGFuZGxlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQWFBOztBQU9PLGVBQWVBLE1BQWYsQ0FBc0JDLE1BQXRCLEVBQXVDQyxJQUF2QyxFQUFtRTtBQUN4RSxRQUFNQyxJQUFtQixHQUFHRCxJQUFJLENBQUNFLENBQUwsQ0FDekJDLEtBRHlCLENBQ25CLENBRG1CLEVBRXpCQyxHQUZ5QixDQUVyQkMsR0FBRyxJQUFJQSxHQUFHLENBQUNDLEtBQUosQ0FBVSxHQUFWLEVBQWUsQ0FBZixDQUZjLEVBR3pCQyxNQUh5QixDQUdsQixDQUFDLENBQUNDLElBQUQsRUFBT0MsS0FBUCxDQUFELEtBQW1CRCxJQUFJLEtBQUssRUFBVCxJQUFlQyxLQUFLLEtBQUssRUFIMUIsRUFJekJMLEdBSnlCLENBSXJCLENBQUMsQ0FBQ0ksSUFBRCxFQUFPQyxLQUFQLENBQUQsS0FBbUIsQ0FBQ1YsTUFBTSxDQUFDVyxPQUFQLENBQWVGLElBQWYsQ0FBRCxFQUF1QlQsTUFBTSxDQUFDWSxLQUFQLENBQWFILElBQWIsQ0FBdkIsRUFBMkNDLEtBQTNDLENBSkUsQ0FBNUI7O0FBS0FSLEVBQUFBLElBQUksQ0FBQ1csT0FBTCxDQUFhLENBQUMsQ0FBQ0osSUFBRCxHQUFTQyxLQUFULENBQUQsS0FBcUI7QUFDaENWLElBQUFBLE1BQU0sQ0FBQ1MsSUFBRCxDQUFOLEdBQWVDLEtBQWY7QUFDRCxHQUZEOztBQUdBLE1BQUlSLElBQUksQ0FBQ1ksTUFBTCxLQUFnQixDQUFwQixFQUF1QjtBQUNyQjtBQUNEOztBQUNEYixFQUFBQSxJQUFJLENBQUNjLEtBQUwsSUFBY0MsT0FBTyxDQUFDQyxHQUFSLENBQWEsY0FBYUMsT0FBTyxDQUFDQyxXQUFSLENBQW9CLEtBQXBCLEVBQTJCbkIsTUFBM0IsQ0FBbUMsS0FBSUEsTUFBTSxDQUFDb0IsT0FBUSxHQUFoRixDQUFkO0FBQ0EsU0FBT3BCLE1BQU0sQ0FBQ3FCLEtBQVAsQ0FBYSxHQUFHbkIsSUFBSSxDQUFDRyxHQUFMLENBQVMsQ0FBQyxHQUFHaUIsRUFBSCxDQUFELEtBQVlBLEVBQXJCLENBQWhCLEVBQTBDQyxJQUExQyxDQUFnREMsR0FBRCxJQUFTO0FBQzdELFFBQUl2QixJQUFJLENBQUNjLEtBQVQsRUFBZ0I7QUFDaEJTLElBQUFBLEdBQUcsQ0FBQ25CLEdBQUosQ0FBUWlCLEVBQUUsSUFBSXRCLE1BQU0sQ0FBQ1csT0FBUCxDQUFlVyxFQUFmLENBQWQsRUFDR1QsT0FESCxDQUNXSixJQUFJLElBQUlPLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLE1BQUtSLElBQUssTUFBS2dCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsTUFBTSxDQUFDUyxJQUFELENBQXJCLENBQTZCLEVBQXpELENBRG5CO0FBRUQsR0FKTSxDQUFQO0FBS0Q7O0FBRUQsTUFBTWtCLFlBQWtELEdBQUc7QUFDekRDLEVBQUFBLE9BQU8sRUFBRSxPQURnRDtBQUV6REMsRUFBQUEsUUFBUSxFQUFFLGdDQUYrQztBQUd6REMsRUFBQUEsT0FBTyxFQUFFQyxJQUFJLElBQUlBLElBQUksQ0FDbEJDLFlBRGMsQ0FDRCxDQUFDLEtBQUQsRUFBUSxHQUFSLENBREMsRUFFZEMsT0FGYyxDQUdiLHFEQUhhLEVBSVo7NEVBSlksQ0FId0M7QUFVekRDLEVBQUFBLE9BQU8sRUFBRSxrQ0FBbUJuQyxNQUFuQixFQUEyQixJQUEzQjtBQVZnRCxDQUEzRDtlQWFlNEIsWSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE5LiBOYXRhLUluZm9cbiAqIEBhdXRob3IgQW5kcmVpIFNhcmFrZWV2IDxhdnNAbmF0YS1pbmZvLnJ1PlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBcIkBuYXRhXCIgcHJvamVjdC5cbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3XG4gKiB0aGUgRVVMQSBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgeyBBcmd1bWVudHMsIENvbW1hbmRNb2R1bGUsIERlZmluZWQgfSBmcm9tICd5YXJncyc7XG5cbmltcG9ydCB7IElEZXZpY2UgfSBmcm9tICdAbmlidXMvY29yZS9saWIvbWliJztcbmltcG9ydCB7IG1ha2VBZGRyZXNzSGFuZGxlciB9IGZyb20gJy4uL2hhbmRsZXJzJztcbmltcG9ydCB7IENvbW1vbk9wdHMgfSBmcm9tICcuLi9vcHRpb25zJztcblxudHlwZSBXcml0ZU9wdHMgPSBEZWZpbmVkPENvbW1vbk9wdHMsICdtYWMnIHwgJ20nPjtcblxudHlwZSBOYW1lSWRWYWx1ZSA9IFtzdHJpbmcsIG51bWJlciwgc3RyaW5nXTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFjdGlvbihkZXZpY2U6IElEZXZpY2UsIGFyZ3M6IEFyZ3VtZW50czxXcml0ZU9wdHM+KSB7XG4gIGNvbnN0IHZhcnM6IE5hbWVJZFZhbHVlW10gPSBhcmdzLl9cbiAgICAuc2xpY2UoMSlcbiAgICAubWFwKGFyZyA9PiBhcmcuc3BsaXQoJz0nLCAyKSlcbiAgICAuZmlsdGVyKChbbmFtZSwgdmFsdWVdKSA9PiBuYW1lICE9PSAnJyAmJiB2YWx1ZSAhPT0gJycpXG4gICAgLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gW2RldmljZS5nZXROYW1lKG5hbWUpLCBkZXZpY2UuZ2V0SWQobmFtZSksIHZhbHVlXSBhcyBOYW1lSWRWYWx1ZSk7XG4gIHZhcnMuZm9yRWFjaCgoW25hbWUsICwgdmFsdWVdKSA9PiB7XG4gICAgZGV2aWNlW25hbWVdID0gdmFsdWU7XG4gIH0pO1xuICBpZiAodmFycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYXJncy5xdWlldCB8fCBjb25zb2xlLmxvZyhgV3JpdGluZyB0byAke1JlZmxlY3QuZ2V0TWV0YWRhdGEoJ21pYicsIGRldmljZSl9IFske2RldmljZS5hZGRyZXNzfV1gKTtcbiAgcmV0dXJuIGRldmljZS53cml0ZSguLi52YXJzLm1hcCgoWywgaWRdKSA9PiBpZCkpLnRoZW4oKGlkcykgPT4ge1xuICAgIGlmIChhcmdzLnF1aWV0KSByZXR1cm47XG4gICAgaWRzLm1hcChpZCA9PiBkZXZpY2UuZ2V0TmFtZShpZCkpXG4gICAgICAuZm9yRWFjaChuYW1lID0+IGNvbnNvbGUubG9nKGAgLSAke25hbWV9ID0gJHtKU09OLnN0cmluZ2lmeShkZXZpY2VbbmFtZV0pfWApKTtcbiAgfSk7XG59XG5cbmNvbnN0IHdyaXRlQ29tbWFuZDogQ29tbWFuZE1vZHVsZTxDb21tb25PcHRzLCBXcml0ZU9wdHM+ID0ge1xuICBjb21tYW5kOiAnd3JpdGUnLFxuICBkZXNjcmliZTogJ9C30LDQv9C40YHRjCDQv9C10YDQtdC80LXQvdC90YvRhSDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvicsXG4gIGJ1aWxkZXI6IGFyZ3YgPT4gYXJndlxuICAgIC5kZW1hbmRPcHRpb24oWydtYWMnLCAnbSddKVxuICAgIC5leGFtcGxlKFxuICAgICAgJyQwIHdyaXRlIC1tIDo6YWI6Y2QgaG9mcz0xMDAgdm9mcz0zMDAgYnJpZ2h0bmVzcz0zNCcsXG4gICAgICBg0LfQsNC/0LjRgdCw0YLRjCDQsiDQv9C10YDQtdC80LXQvdC90YvQtTogaG9mczwtMTAwLCB2b2ZzPC0zMDAsIGJyaWdodG5lc3M8LTM0INC90LAg0YPRgdGC0YDQvtC50YHRgtCy0LUg0YEg0LDQtNGA0LXRgdC+0LwgOjphYjpjZFxuICAgICAgbWliINGD0LrQsNC30YvQstCw0YLRjCDQvdC1INC+0LHRj9C30LDRgtC10LvRjNC90L4sINC10YHQu9C4INGDINGD0YHRgtGA0L7QudGB0YLQstCwINC10YHRgtGMIGZpcm13YXJlX3ZlcnNpb25gLFxuICAgICksXG4gIGhhbmRsZXI6IG1ha2VBZGRyZXNzSGFuZGxlcihhY3Rpb24sIHRydWUpLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgd3JpdGVDb21tYW5kO1xuIl19